# -*- coding: utf-8 -*-
"""Model Evaluation and Hyperparameter Tuning_Celebal.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1m_gZyImLDyq-zN2g4urqtOU6IZuAPs6S
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, GridSearchCV, RandomizedSearchCV
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from scipy.stats import randint

# Load your dataset
df = pd.read_csv('//content//sample_data//mnist_train_small.csv')  # Change to your filename
print(df.head())
print(df.info())
print(df.isnull().sum())

# Drop duplicates
df.drop_duplicates(inplace=True)

# Drop or fill missing values
df.dropna(inplace=True)  # OR use df.fillna()

# Encode categorical columns
for col in df.select_dtypes(include='object').columns:
    df[col] = LabelEncoder().fit_transform(df[col])

X = df.drop('6', axis=1)  # Drop the target column
y = df['6']             # Use it as label

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, stratify=y, random_state=42
)

# Feature Scaling
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# define base model
models = {
    'Logistic Regression': LogisticRegression(),
    'Random Forest': RandomForestClassifier(),
    'SVM': SVC()
}

# Train and evaluate without tuning
print("BASELINE MODEL RESULTS:\n")
for name, model in models.items():
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    print(f"{name}:")
    print(f"Accuracy: {accuracy_score(y_test, y_pred):.4f}")
    print(f"Precision: {precision_score(y_test, y_pred, average='weighted'):.4f}")
    print(f"Recall: {recall_score(y_test, y_pred, average='weighted'):.4f}")
    print(f"F1 Score: {f1_score(y_test, y_pred, average='weighted'):.4f}\n")

#GridSearchCV – Logistic Regression
from sklearn.feature_selection import SelectKBest, f_classif
X_new = SelectKBest(f_classif, k=50).fit_transform(X_train, y_train)  # Try 50 best features
param_grid_lr = {
    'C': [0.1, 1, 10],
    'solver': ['saga']
}
grid_lr = GridSearchCV(LogisticRegression(), param_grid_lr, cv=3, scoring='f1_weighted')
grid_lr.fit(X_new, y_train)  # You MUST call .fit()

print("Best Parameters:", grid_lr.best_params_)
print("Best F1 Score:", grid_lr.best_score_)

#RandomizedSearchCV – Random Forest
from scipy.stats import randint

param_dist_rf = {
    'n_estimators': randint(10, 30),      # SMALL
    'max_depth': randint(3, 7),           # SHALLOW
    'min_samples_split': randint(2, 4)    # BASIC
}

random_rf = RandomizedSearchCV(
    estimator=RandomForestClassifier(),
    param_distributions=param_dist_rf,
    n_iter=2,        # TEST RUN ONLY
    cv=2,
    scoring='f1_weighted',
    random_state=42,
    n_jobs=-1
)

random_rf.fit(X_train_reduced, y_train)

grid_lr.fit(X_train_reduced, y_train)

from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

tuned_models = {
    'Tuned Logistic Regression': grid_lr.best_estimator_,
    'Tuned Random Forest': random_rf.best_estimator_
}

for name, model in tuned_models.items():
    y_pred = model.predict(X_test_reduced)
    print(f"\n{name}")
    print(f"Accuracy: {accuracy_score(y_test, y_pred):.4f}")
    print(f"Precision: {precision_score(y_test, y_pred, average='weighted'):.4f}")
    print(f"Recall: {recall_score(y_test, y_pred, average='weighted'):.4f}")
    print(f"F1 Score: {f1_score(y_test, y_pred, average='weighted'):.4f}")

#saving it to file
final_model = grid_lr.best_estimator_

import joblib
joblib.dump(final_model, 'best_model.pkl')

